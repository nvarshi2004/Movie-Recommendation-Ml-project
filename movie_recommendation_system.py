# -*- coding: utf-8 -*-
"""Movie Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DBFtmk0qs1MMWXXow7JwzabBDTBHrzJR
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
movies = pd.read_csv('movies.csv')  # contains movieId, title, genres
ratings = pd.read_csv('ratings.csv')  # contains userId, movieId, rating, timestamp

movies.size

ratings.size

movies.shape

ratings.shape

movies.head(5)

ratings.head(5)

movies.tail(5)

ratings.tail(5)

movies.columns

ratings.columns

movies.isnull().sum()

ratings.isnull().sum()

movies.describe()

ratings.describe()

# Merge ratings with movie titles
data = pd.merge(ratings, movies, on='movieId')
print(f"Data shape: {data.shape}")
print(data.head())

# 2. Create User-Movie Matrix
print("\nCreating user-movie matrix...")
user_movie_matrix = data.pivot_table(index='userId', columns='title', values='rating')
print("Matrix sample:")
print(user_movie_matrix.iloc[:5, :5])  # Display a sample

# 3. Compute Cosine Similarity
print("\nFilling missing values and computing user similarity...")
user_movie_filled = user_movie_matrix.fillna(0)
user_similarity = cosine_similarity(user_movie_filled)
# Create a DataFrame for better readability
user_similarity_df = pd.DataFrame(user_similarity,
                                  index=user_movie_filled.index,
                                  columns=user_movie_filled.index)

#Visualize similarity matrix
plt.figure(figsize=(8, 6))
sns.heatmap(user_similarity_df.iloc[:10, :10], cmap="viridis", annot=True)
plt.title("User Similarity Heatmap (First 10 Users)")
plt.show()

#4. Recommendation Function
def recommend_movies(user_id, num_recommendations=5):
    print(f"\nGenerating recommendations for User {user_id}...")

    if user_id not in user_similarity_df:
        print(f"User ID {user_id} not found.")
        return []

    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[1:]
    weighted_scores = pd.Series(dtype=np.float64)

    for other_user, similarity in similar_users.items():
        other_user_ratings = user_movie_filled.loc[other_user]
        weighted_scores = weighted_scores.add(other_user_ratings * similarity, fill_value=0)

    user_rated = user_movie_filled.loc[user_id]
    weighted_scores = weighted_scores[user_rated == 0]

    top_recommendations = weighted_scores.sort_values(ascending=False).head(num_recommendations)

    print("Recommended movies:")
    for movie, score in top_recommendations.items():
        print(f"  {movie} (score: {score:.2f})")

    return top_recommendations.index.tolist()

# 5. Example Usage
user_id = 6
recommendations = recommend_movies(user_id)